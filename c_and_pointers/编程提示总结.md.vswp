vnote_backup_file_826537664 E:/notebook/c_and_pointers/编程提示总结.md
# 编程提示总结

## 1
1. 使用#include指令避免重复声明
2. 使用#define指令给常量取名
3. 在#include文件中放置函数原型
4. 在使用下标前先检查它们的值
5. 在while或if表达式中蕴含赋值操作
6. 如何编写一个空循环体
7. 始终要进行检查，确保数组不越界


## 2
1. 良好的程序风格和文档将使程序更容易阅读和维护。


### 3
1. 为了保持最佳的可移植性，把字符的值限制在有符号和无符号字符范围的交集之内，或者不要在字符上执行算法运算。
2. 用它们在使用时最自然的形式表示字面值。
3. 不要把整型值和枚举值一起使用。
4. 不要依赖隐式声明。
5. 在定义类型的新名字时，使用typedef而不是#define
6. 用const声明其值不会修改的变量。
7. 使用名字变量而不是字面值常量。如#define MYNAME "ABC"
8. 不要再嵌套的代码之间使用相同的变量名。
9. 除了实体的具体定义位置之外，在它的其他声明位置都是用extern关键字。


### 4
1. 在一个没有循环体的循环中，用一个分号表示空语句，并让它独占一行。
2. for循环的可读性比while循环强，因为它把用于控制循环的表达式收集起来放在一个地方。
3. 在每个switch语句中都使用default子句。


### 5
1. 使用复合赋值可以使程序更易于维护。
2. 使用条件操作符替代if语句以简化表达式。
3. 使用逗号操作符来消除多余的代码。
4. 不要混用整型和布尔值型。


### 6
1. 一个值应该只具有一种意思。
2. 如果指针并不指向任何有意义的东西，就把它设置为NULL。


### 7
1. 在函数原型中使用参数名，可以给使用该函数的用户提供更多的信息。
2. 抽象数据类型可以减少程序对模块实现细节的依赖，从而提高程序的可靠性。
3. 当递归定义清晰的优点可以补偿它的效率开销时，就可以使用递归。


### 8
1. 一开始就编写良好的代码显然比依赖编译器来修正劣质代码更好。
2. 源代码的可读性几乎总是比程序的运行时效率更为重要。
3. 只要有可能，函数的指针形参都应该声明为const。
4. 在有些环境中，使用register关键字提高程序的运行效率。
5. 在多维数组的初始值列表中使用完整的多层花括号能提高可读性。


### 9
1. 不要试图自己编写功能相同的函数替代库函数。
2. 使用字符分类和转换函数可以提高函数的移植性。


### 10
1. 把结构标签声明和结构的typedef声明放在头文件中，当源文件需要这些声明时可以通过#include指令把它们包含进来。
2. 结构成员的最佳排列形式并不一定就是考虑边界对齐而浪费内存最少的那种排列方式。
3. 把位段成员显式地声明为signed int或unsigned int类型。
4. 位段是不可移植的。
5. 位段使源代码中位的操作表达更为清楚。


### 11
1. 动态内存分配有助于消除程序内存存在的限制。
2. 使用sizeof计算数据类型的长度，提高程序的可移植性。b