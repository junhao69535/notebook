vnote_backup_file_826537664 E:/notebook/c_and_pointers/字符串、字符和字节.md
# 字符串、字符和字节

## 字符串
字符串就是一串零个或多个字符，并且以一个位模式为全0的NUL字节结尾。NUL字节时字符串的终止符，但它本身并不是字符串的一部分，所以字符串的长度并不包含NUL字节。

## 字符串库函数
字符串库函数原型包含于string.h头文件。

### 字符串长度
`size_t strlen(char const *string);`
返回值是该字符串的长度，不包含NUL字节。

### 不受限制的字符串函数
最常用的字符串函数都是“不受限制”的，就是说它们只是通过寻找字符串参数结尾的NUL字节判断它的长度。使用这些函数，必须保证结果字符串不会溢出这块内容。因此是不安全的，不推荐使用。

#### 复制字符串
`char *strcpy(char *dst, char const *src);`
返回值是第一个参数的拷贝，指向被复制的字符串。
如果参数src和dst在内存中出现重叠，其结果是未定义的。由于dst参数将进行修改，所以它必须是个字符数组或者是一个指向动态分配内存的数组的指针，不能使用字符串字面量。
**如果字符串比数组长，多余的字符仍被复制，它们将覆盖原先存储于数组后面的内存空间的值。strcpy无法解决这个问题，因为它无法判断目标字符数组的长度**

#### 连接字符串
`char *strcat(char *dst, char const *src);`
返回值是第一个参数的拷贝，指向被连接的字符串。
连接时会把dst的NUL字节去掉，只留下src的NUL字节作为结束符。如果src和dst的位置发生重叠，其结果是未定义的。

#### 字符串比较
`int strcmp(char const *s1, char const *s2);`
如果s1小于s2，返回一个小于0的值；如果s1等于s2，返回零；如果s1大于s2，返回一个大于0的值。

### 长度受限的字符串函数
这类函数可以防止难以预料的长字符串从它们的目标数组溢出。更安全，推荐使用这类函数。

#### 复制字符串
`char *strncpy(char *dst, char const *src, size_t len);`
返回值是第一个参数的拷贝，指向被复制的字符串。
如果src的长度小于len，dst数组就用额外的NUL字节填充到len长度。如果src的长度大于或等于len，那么只有len个字符被复制到dst。**它的结果不会以NUL字节结尾。**

**strncpy调用的结果可能不是一个字符串，因为字符串必须以NUL字节结尾。**如果确定需要字符串，那么可以采用以下办法保证结果是一个字符串。

```c
char buffer[BSIZE];
...
strncpy(buffer, name, BSIZE);
buffer[BSIZE-1] = '\0';
```

#### 连接字符串
`char *strncat(char *dst, char const *src, size_t len);`
返回值是第一个参数的拷贝，指向被连接的字符串。
strncat最多向目标数组赋值len个字符（再加一个结尾的NUL字节，不包含在len），它不管目标参数除去原先存在的字符串之后留下的空间够不够。即：

```c
char buf[10] = {'H', 'L'};
strncat(buf, "womenshipengyou", 10);
printf("%lu\n", strlen(buf));  /* 结果为12 */
printf("%c\n", buf[11]);  /* 结果为'e' */
```

#### 字符串比较
`int strncmp(char const *s1, char const *s2, size_t len);`
最多比较len个字符。