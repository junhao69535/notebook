vnote_backup_file_826537664 E:/notebook/c_and_pointers/数组.md
# 数组

## 一维数组
取一个数组名的地址所产生的是一个指向数组的指针，虽然这个指针的值和数组第一个元素的地址相同，但它们的类型不相同，前者指向的是一个整型数组，后者指向的是一个整型元素。

### 数组和指针

```c
int a[5];
int *b;
```

a和b都具有指针值，它们都可以进行间接访问和下标引用操作，但它们存在相当大的区别。

* 声明一个数组时，编译器将根据声明所指定的元素数量为数组保留内存空间，然后再创建数组名，它的值是一个常量，指向这段空间的起始位置。
* 声明一个指针变量时，编译器只为指针本身保留内存空间，它并不为任何整型值分配内存空间。

上述声明后，表达式`*a`完全合法，但表达式`*b`确实非法的，`*b`将访问内存中某个不确定的位置，是非法的。另一方面，表达式`b++`可以通过编译，但`a++`却不行，因为a的值是个常量。

### 字符数组的初始化

```c
/* 两种方法初始化实际上是相同的 */
char message[] = {'H', 'e', 'l', 'l', 'o', '\0'};
char message[] = "Hello";
```

字符串字面量用于初始化字符数组时，它是一个初始化列表，再其他任何地方，它都表示一个字符串常量。

```c
/* 两种方法初始化是不相同的 */
char message1[] = "Hello";
char *message2 = "Hello";
```

前者初始化一个字符数组的元素，而后者是一个真正的字符串字面量，这个指针变量被初始化为指向这个字符串字面量的存储位置。


## 二维数组
在C中，多维数组的元素存储顺序按照最右边的下边率先变化的原则，称为行主序。

### 数组名
一维数组名的值是一个指针常量，它的类型是“指向元素类型的指针”，它指向数组的第1个元素。而多维数组也类似，只不过它的第1维元素实际上是另一个数组。

```c
int matrix[3][10];
```

matrix这个名字的值是一个指向它第1个元素的指针，所以matrix是一个指向一个包含10个整型元素的数组的指针。
**尽管matrix的值和第1个元素的第1个元素地址相同，但它们不相等，因为它们的类型不同。即matrix和matrix[0]的值相等，但前者是指向一个数组，后者是指向整型（假设元素是整型）。**


## 总结
在绝大多数表达式中，数组名的值是指向数组第1个元素的指针。这个规则只有两个例外。
* sizeof返回真个数组所占用的字节而不是一个指针所占用的字节。
* 单目操作符&返回一个指向数组的指针，而不是一个指向数组第1个元素的指针的指针。

除了优先级不同以外，下标表达式`array[value]`和间接访问表达式`*(array+(value))`是一样的。下标优先级更高。

指针和数组并不相等。数组的属性和指针的属性大相径庭。当声明一个数组时，它同时也分配了一些内存空间，用于容纳数组元素。但是，当我们声明一个指针时，它只分配了用于容纳指针本身的空间。

数组形参既可以声明为数组，也可以声明为指针。这两种声明形式只有当它们作为函数的形参时才是相等的。